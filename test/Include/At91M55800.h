/*key words:
EBI
APMC
AIC
PIO
US
RTC
TC
ADC
DAC
SP
WD
SF
*/

#ifndef At91M55800H
#define At91M55800H

#include "UserType.h"

/*-------------------------------------*/
/* Peripheral and Interrupt Identifier */
/*-------------------------------------*/

#define FIQ_ID      0       /* Fast Interrupt */

#define SW_ID       1       /* Soft Interrupt (generated by the AIC) */

#define US0_ID      2       /* USART Channel 0 */
#define US1_ID      3       /* USART Channel 1 */
#define US2_ID      4       /* USART Channel 2 */

#define SPI_ID      5       /* SPI Channel */

#define TC0_ID      6       /* Timer Channel 0 */
#define TC1_ID      7       /* Timer Channel 1 */
#define TC2_ID      8       /* Timer Channel 2 */
#define TC3_ID      9       /* Timer Channel 3 */
#define TC4_ID      10      /* Timer Channel 4 */
#define TC5_ID      11      /* Timer Channel 5 */

#define WD_ID       12      /* Watchdog interrupt */

#define PIOA_ID     13      /* Parallel I/O Controller A interrupt */
#define PIOB_ID     14      /* Parallel I/O Controller B interrupt */

#define AD0_ID      15      /* Analog to Digital Converter Channel 0 interrupt */
#define AD1_ID      16      /* Analog to Digital Converter Channel 1 interrupt */

#define DAC0_ID     17      /* Digital to Analog Converter Channel 0 interrupt */
#define DAC1_ID     18      /* Digital to Analog Converter Channel 1 interrupt */

#define RTC_ID      19      /* Real Time Clock interrupt */

#define APMC_ID     20      /* Advanced Power Management Controller interrupt */

#define SLCKIRQ_ID  23      /* Slow Clock Interrupt */
#define IRQ5_ID     24      /* External interrupt 5 */
#define IRQ4_ID     25      /* External interrupt 4 */
#define IRQ3_ID     26      /* External interrupt 3 */
#define IRQ2_ID     27      /* External interrupt 2 */
#define IRQ1_ID     28      /* External interrupt 1 */
#define IRQ0_ID     29      /* External interrupt 0 */

#define COMMRX_ID   30      /* RX Debug Communication Channel interrupt */
#define COMMTX_ID   31      /* TX Debug Communication Channel interrupt */


















/*-----------------------*/
/* Peripheral Memory Map */
/*-----------------------*/



/*-------------------------*/
/* Internal RAM Definition */
/*-------------------------*/

#define RAM_SIZE        (8*1024)
#define RAM_BASE        ((UINT32 *)0x00000000)
#define RAM_LIMIT       (((UINT32)RAM_BASE) + RAM_SIZE)

/* The internal RAM is mapped at address 0x00300000 after reset until
   Remap command is performed on the EBI. */

#define RAM_BASE_BOOT       ((UINT32 *)0x00300000)













/*-----------------------------------*/
/*  ARM Core                         */
/*-----------------------------------*/
/*--------------------------*/
/* ARM Mode and Status Bits */
/*--------------------------*/

#define     ARM_MODE_USER       0x10
#define     ARM_MODE_FIQ        0x11
#define     ARM_MODE_IRQ        0x12
#define     ARM_MODE_SVC        0x13
#define     ARM_MODE_ABORT      0x17
#define     ARM_MODE_UNDEF      0x1B
#define     ARM_MODE_SYS        0x1F

#define     I_BIT               0x80
#define     F_BIT               0x40
#define     T_BIT               0x20
















/*----------------------------*/
/* External Bus Interface     */
/*----------------------------*/
/*-------------------------------------------------------*/
/* Memory Controller User Interface Structure Definition */
/*-------------------------------------------------------*/

typedef struct
{
    REG        EBI_CSR[8] ;        /* Chip Select Register */
    REG        EBI_RCR ;           /* Remap Control Register */
    REG        EBI_MCR ;           /* Memory Control Register */
} EBI_REG_ST ;

#define EBI_BASE            ((EBI_REG_ST *)0xFFE00000)


/*----------------------------------*/
/* External Bus Interface Registers */
/*----------------------------------*/

#define EBI_CSR0        (EBI_BASE->EBI_CSR[0])
#define EBI_CSR1        (EBI_BASE->EBI_CSR[1])
#define EBI_CSR2        (EBI_BASE->EBI_CSR[2])
#define EBI_CSR3        (EBI_BASE->EBI_CSR[3])
#define EBI_CSR4        (EBI_BASE->EBI_CSR[4])
#define EBI_CSR5        (EBI_BASE->EBI_CSR[5])
#define EBI_CSR6        (EBI_BASE->EBI_CSR[6])
#define EBI_CSR7        (EBI_BASE->EBI_CSR[7])
#define EBI_RCR         (EBI_BASE->EBI_RCR)
#define EBI_MCR         (EBI_BASE->EBI_MCR)

/*--------------------------------*/
/* EBI_CSR: Chip Select Registers */
/*--------------------------------*/

#define EBI_DBW             0x3         /* Data Bus Width */
#define EBI_DBW_16          0x1         /* 16-bit Data Bus */
#define EBI_DBW_8           0x2         /* 8-bit Data Bus */

#define EBI_NWS             0x1C        /* Number of Wait States */
#define EBI_NWS_1           0x0         /* 1 wait state */
#define EBI_NWS_2           0x4         /* 2 wait state */
#define EBI_NWS_3           0x8         /* 3 wait state */
#define EBI_NWS_4           0xC         /* 4 wait state */
#define EBI_NWS_5           0x10        /* 5 wait state */
#define EBI_NWS_6           0x14        /* 6 wait state */
#define EBI_NWS_7           0x18        /* 7 wait state */
#define EBI_NWS_8           0x1C        /* 8 wait state */

#define EBI_WSE             0x20        /* Wait State Enable */

#define EBI_PAGES           0x180       /* Page size */
#define EBI_PAGES_1M        0x0         /* 1 Mbytes */
#define EBI_PAGES_4M        0x80        /* 4 Mbytes */
#define EBI_PAGES_16M       0x100       /* 16 Mbytes */
#define EBI_PAGES_64M       0x180       /* 64 Mbytes */

#define EBI_TDF             0xE00       /* Number of Data Float Output Time Clock Cycle */
#define EBI_TDF_0           0x0         /* 0 cycles added */
#define EBI_TDF_1           0x200       /* 1 cycles added */
#define EBI_TDF_2           0x400       /* 2 cycles added */
#define EBI_TDF_3           0x600       /* 3 cycles added */
#define EBI_TDF_4           0x800       /* 4 cycles added */
#define EBI_TDF_5           0xA00       /* 5 cycles added */
#define EBI_TDF_6           0xC00       /* 6 cycles added */
#define EBI_TDF_7           0xE00       /* 7 cycles added */

#define EBI_BAT             0x1000      /* Byte Access Type */
#define EBI_BAT_BYTE_WRITE  0x0         /* Byte Write Access Type */
#define EBI_BAT_BYTE_SELECT 0x1000      /* Byte Select Access Type */

#define EBI_CSEN            0x2000      /* Chip Select Enable */

#define EBI_BA              0xFFF00000

/*---------------------------------*/
/* EBI_RCR: Remap Control Register */
/*---------------------------------*/

#define EBI_RCB             0x1         /* Remap Command Bit */

/*----------------------------------*/
/* EBI_MCR: Memory Control Register */
/*----------------------------------*/

#define EBI_ALE             0x7         /* Address Line Enable */
#define EBI_ALE_16M         0x0         /* Bank Size 16Mbytes */
#define EBI_ALE_8M          0x4         /* Bank Size 16Mbytes */
#define EBI_ALE_4M          0x5         /* Bank Size 16Mbytes */
#define EBI_ALE_2M          0x6         /* Bank Size 16Mbytes */
#define EBI_ALE_1M          0x7         /* Bank Size 16Mbytes */

#define EBI_DRP             0x10        /* Data Read Protocol */
#define EBI_DRP_STANDARD    0x0         /* Standard Read Protocol */
#define EBI_DRP_EARLY       0x10        /* Early Read Protocol */



















/*---------------------------------------*/
/* Advanced Power Management Controller  */
/*---------------------------------------*/

/*---------------------------------------*/
/* Advanced Power Management Controller  */
/*---------------------------------------*/

typedef struct
{
    REG    APMC_SCER ;          /* System Clock Enable  Register */
    REG    APMC_SCDR ;          /* System Clock Disable Register */
    REG    APMC_SCSR ;          /* System Clock Status  Register */
    REG    Reserved0 ;
    REG    APMC_PCER ;          /* Peripheral Clock Enable  Register */
    REG    APMC_PCDR ;          /* Peripheral Clock Disable Register */
    REG    APMC_PCSR ;          /* Peripheral Clock Status  Register */
    REG    Reserved1 ;
    REG    APMC_CGMR ;          /* Clock Generator Mode Register */
    REG    Reserved2 ;
    REG    APMC_PCR ;           /* Power Control Register */
    REG    APMC_PMR ;           /* Power Mode Register */
    REG    APMC_SR ;            /* Status Register */
    REG    APMC_IER ;           /* Interrupt Enable Register */
    REG    APMC_IDR ;           /* Interrupt Disable Register */
    REG    APMC_IMR ;           /* Interrupt Mask Register */
} APMC_REG_ST ;

#define APMC_BASE        (( APMC_REG_ST *) 0xFFFF4000)


/*------------------------------------------------*/
/* Advanced Power Management Controller Registers */
/*------------------------------------------------*/

#define APMC_SCER       (APMC_BASE->APMC_SCER)
#define APMC_SCDR       (APMC_BASE->APMC_SCDR)
#define APMC_SCSR       (APMC_BASE->APMC_SCSR)
#define APMC_PCER       (APMC_BASE->APMC_PCER)
#define APMC_PCDR       (APMC_BASE->APMC_PCDR)
#define APMC_PCSR       (APMC_BASE->APMC_PCSR)
#define APMC_CGMR       (APMC_BASE->APMC_CGMR)
#define APMC_PCR        (APMC_BASE->APMC_PCR)
#define APMC_PMR        (APMC_BASE->APMC_PMR)
#define APMC_SR         (APMC_BASE->APMC_SR)
#define APMC_IER        (APMC_BASE->APMC_IER)
#define APMC_IDR        (APMC_BASE->APMC_IDR)
#define APMC_IMR        (APMC_BASE->APMC_IMR)

/*-----------------------------------------------------------*/
/* Advanced Power Managment Control Register Bits Definition */
/*-----------------------------------------------------------*/
#define     APMC_ARM7DIS            0x1

/*------------------------------------------------------------------------*/
/* Advanced Power Managment Clock Generator Mode Register Bits Definition */
/*------------------------------------------------------------------------*/
#define     APMC_MOSC_BYP           0x1     /* Main Oscillator Bypass */
#define     APMC_MOSC_EN            0x2     /* Main Oscillator Enable */
#define     APMC_MCKO_DIS           0x4     /* Disable Master clock output (tri-state) */

#define     APMC_PRES_NONE          0x0     /* No prescaler */
#define     APMC_PRES_DIV2          0x10    /* Selected Clock Divided by 2 */
#define     APMC_PRES_DIV4          0x20    /* Selected Clock Divided by 4 */
#define     APMC_PRES_DIV8          0x30    /* Selected Clock Divided by 8 */
#define     APMC_PRES_DIV16         0x40    /* Selected Clock Divided by 16 */
#define     APMC_PRES_DIV32         0x50    /* Selected Clock Divided by 32 */
#define     APMC_PRES_DIV64         0x60    /* Selected Clock Divided by 64 */

#define     APMC_CSS_LF             0x0     /* Low-Frequency Clock provided by RTC */
#define     APMC_CSS_MOSC           0x4000  /* Main Oscillator Output or External clock */
#define     APMC_CSS_PLL            0x8000  /* Phase Lock Loop Output */

#define     B_MUL                   8
#define     B_OSCOUNT               16
#define     B_PLLCOUNT              24

/*------------------------------------------------*/
/* APM Power Controller Register Bits Definition  */
/*------------------------------------------------*/
#define     APMC_SHDALC             0x1     /* Shut-down or alarm Command */
#define     APMC_WKACKC             0x2     /* Wake-up or Alarm Acknowledge Command */

/*-----------------------------------------------*/
/* APM Power Mode Register Bits Definition       */
/*-----------------------------------------------*/
#define     APMC_SHDALS_OUT_TRIS        0x0     /* SHDALS pin is Tri-State */
#define     APMC_SHDALS_OUT_LEVEL_0     0x1     /* SHDALS pin is LEVEL 0 */
#define     APMC_SHDALS_OUT_LEVEL_1     0x2     /* SHDALS pin LEVEL 1 */

#define     APMC_WKACKS_OUT_TRIS        0x0     /* WKACKS pin is Tri-State */
#define     APMC_WKACKS_OUT_LEVEL_0     0x4     /* WKACKS pin  is LEVEL 0 */
#define     APMC_WKACKS_OUT_LEVEL_1     0x8     /* WKACKS pin  is LEVEL 1 */

#define     APMC_WKEN                   0x10    /* Alarm Wake-up Enable */
#define     APMC_ALSHEN                 0x20    /* Alarm Shut-Down Enable */

#define     APMC_WKEDG_NONE             0x00    /* None. No edge is detected on Wake-up */
#define     APMC_WKEDG_POS_EDG          0x40    /* Positive edge detection */
#define     APMC_WKEDG_NEG_EDG          0x80    /* Negative edge detection */

/*------------------------------------------------------*/
/* APM SR, IER, IDR and IMR Registers Bits Definition   */
/*------------------------------------------------------*/
#define     APMC_MOSCS                  0x1     /* Main Osillator Status */
#define     APMC_PLL_LOCK               0x2     /* PLL Lock Status */












/*---------------------------------*/
/* Advanced Interrupt Controller   */
/*---------------------------------*/
/*-----------------------------------------*/
/* AIC User Interface Structure Definition */
/*-----------------------------------------*/

typedef struct
{
    REG        AIC_SMR[32] ;       /* Source Mode Register */
    REG        AIC_SVR[32] ;       /* Source Vector Register */
    REG        AIC_IVR ;           /* IRQ Vector Register */
    REG        AIC_FVR ;           /* FIQ Vector Register */
    REG        AIC_ISR ;           /* Interrupt Status Register */
    REG        AIC_IPR ;           /* Interrupt Pending Register */
    REG        AIC_IMR ;           /* Interrupt Mask Register */
    REG        AIC_CISR ;          /* Core Interrupt Status Register */
    REG        reserved0 ;
    REG        reserved1 ;
    REG        AIC_IECR ;          /* Interrupt Enable Command Register */
    REG        AIC_IDCR ;          /* Interrupt Disable Command Register */
    REG        AIC_ICCR ;          /* Interrupt Clear Command Register */
    REG        AIC_ISCR ;          /* Interrupt Set Command Register */
    REG        AIC_EOICR ;         /* End of Interrupt Command Register */
    REG        AIC_SPU ;           /* Spurious Vector Register */
} AIC_REG_ST ;

#define AIC_BASE                        ((AIC_REG_ST *)0xFFFFF000)


/*-----------------------------------------*/
/* Advanced Interrupt Controller Registers */
/*-----------------------------------------*/

#define AIC_SMR0        (AIC_BASE->AIC_SMR[0])
#define AIC_SMR1        (AIC_BASE->AIC_SMR[1])
#define AIC_SMR2        (AIC_BASE->AIC_SMR[2])
#define AIC_SMR3        (AIC_BASE->AIC_SMR[3])
#define AIC_SMR4        (AIC_BASE->AIC_SMR[4])
#define AIC_SMR5        (AIC_BASE->AIC_SMR[5])
#define AIC_SMR6        (AIC_BASE->AIC_SMR[6])
#define AIC_SMR7        (AIC_BASE->AIC_SMR[7])
#define AIC_SMR8        (AIC_BASE->AIC_SMR[8])
#define AIC_SMR9        (AIC_BASE->AIC_SMR[9])
#define AIC_SMR10       (AIC_BASE->AIC_SMR[10])
#define AIC_SMR11       (AIC_BASE->AIC_SMR[11])
#define AIC_SMR12       (AIC_BASE->AIC_SMR[12])
#define AIC_SMR13       (AIC_BASE->AIC_SMR[13])
#define AIC_SMR14       (AIC_BASE->AIC_SMR[14])
#define AIC_SMR15       (AIC_BASE->AIC_SMR[15])
#define AIC_SMR16       (AIC_BASE->AIC_SMR[16])
#define AIC_SMR17       (AIC_BASE->AIC_SMR[17])
#define AIC_SMR18       (AIC_BASE->AIC_SMR[18])
#define AIC_SMR19       (AIC_BASE->AIC_SMR[19])
#define AIC_SMR20       (AIC_BASE->AIC_SMR[20])
#define AIC_SMR21       (AIC_BASE->AIC_SMR[21])
#define AIC_SMR22       (AIC_BASE->AIC_SMR[22])
#define AIC_SMR23       (AIC_BASE->AIC_SMR[23])
#define AIC_SMR24       (AIC_BASE->AIC_SMR[24])
#define AIC_SMR25       (AIC_BASE->AIC_SMR[25])
#define AIC_SMR26       (AIC_BASE->AIC_SMR[26])
#define AIC_SMR27       (AIC_BASE->AIC_SMR[27])
#define AIC_SMR28       (AIC_BASE->AIC_SMR[28])
#define AIC_SMR29       (AIC_BASE->AIC_SMR[29])
#define AIC_SMR30       (AIC_BASE->AIC_SMR[30])
#define AIC_SMR31       (AIC_BASE->AIC_SMR[31])

#define AIC_SVR0        (AIC_BASE->AIC_SVR[0])
#define AIC_SVR1        (AIC_BASE->AIC_SVR[1])
#define AIC_SVR2        (AIC_BASE->AIC_SVR[2])
#define AIC_SVR3        (AIC_BASE->AIC_SVR[3])
#define AIC_SVR4        (AIC_BASE->AIC_SVR[4])
#define AIC_SVR5        (AIC_BASE->AIC_SVR[5])
#define AIC_SVR6        (AIC_BASE->AIC_SVR[6])
#define AIC_SVR7        (AIC_BASE->AIC_SVR[7])
#define AIC_SVR8        (AIC_BASE->AIC_SVR[8])
#define AIC_SVR9        (AIC_BASE->AIC_SVR[9])
#define AIC_SVR10       (AIC_BASE->AIC_SVR[10])
#define AIC_SVR11       (AIC_BASE->AIC_SVR[11])
#define AIC_SVR12       (AIC_BASE->AIC_SVR[12])
#define AIC_SVR13       (AIC_BASE->AIC_SVR[13])
#define AIC_SVR14       (AIC_BASE->AIC_SVR[14])
#define AIC_SVR15       (AIC_BASE->AIC_SVR[15])
#define AIC_SVR16       (AIC_BASE->AIC_SVR[16])
#define AIC_SVR17       (AIC_BASE->AIC_SVR[17])
#define AIC_SVR18       (AIC_BASE->AIC_SVR[18])
#define AIC_SVR19       (AIC_BASE->AIC_SVR[19])
#define AIC_SVR20       (AIC_BASE->AIC_SVR[20])
#define AIC_SVR21       (AIC_BASE->AIC_SVR[21])
#define AIC_SVR22       (AIC_BASE->AIC_SVR[22])
#define AIC_SVR23       (AIC_BASE->AIC_SVR[23])
#define AIC_SVR24       (AIC_BASE->AIC_SVR[24])
#define AIC_SVR25       (AIC_BASE->AIC_SVR[25])
#define AIC_SVR26       (AIC_BASE->AIC_SVR[26])
#define AIC_SVR27       (AIC_BASE->AIC_SVR[27])
#define AIC_SVR28       (AIC_BASE->AIC_SVR[28])
#define AIC_SVR29       (AIC_BASE->AIC_SVR[29])
#define AIC_SVR30       (AIC_BASE->AIC_SVR[30])
#define AIC_SVR31       (AIC_BASE->AIC_SVR[31])


#define AIC_IVR         (AIC_BASE->AIC_IVR)
#define AIC_FVR         (AIC_BASE->AIC_FVR)
#define AIC_ISR         (AIC_BASE->AIC_ISR)
#define AIC_IPR         (AIC_BASE->AIC_IPR)
#define AIC_IMR         (AIC_BASE->AIC_IMR)
#define AIC_CISR        (AIC_BASE->AIC_CISR)
#define AIC_IECR        (AIC_BASE->AIC_IECR)
#define AIC_IDCR        (AIC_BASE->AIC_IDCR)
#define AIC_ICCR        (AIC_BASE->AIC_ICCR)
#define AIC_ISCR        (AIC_BASE->AIC_ISCR)
#define AIC_EOICR       (AIC_BASE->AIC_EOICR)
#define AIC_SPU         (AIC_BASE->AIC_SPU)

/*--------------------------------------------*/
/* AIC_SMR[]: Interrupt Source Mode Registers */
/*--------------------------------------------*/

#define AIC_PRIOR                       0x07    /* Priority */

#define AIC_SRCTYPE                     0x60    /* Source Type Definition */

/* Internal Interrupts */
#define AIC_SRCTYPE_INT_LEVEL_SENSITIVE 0x00    /* Level Sensitive */
#define AIC_SRCTYPE_INT_EDGE_TRIGGERED  0x20    /* Edge Triggered */

/* External Interrupts */
#define AIC_SRCTYPE_EXT_LOW_LEVEL       0x00    /* Low Level */
#define AIC_SRCTYPE_EXT_NEGATIVE_EDGE   0x20    /* Negative Edge */
#define AIC_SRCTYPE_EXT_HIGH_LEVEL      0x40    /* High Level */
#define AIC_SRCTYPE_EXT_POSITIVE_EDGE   0x60    /* Positive Edge */

/*------------------------------------*/
/* AIC_ISR: Interrupt Status Register */
/*------------------------------------*/

#define AIC_IRQID                       0x1F    /* Current source interrupt */

/*------------------------------------------*/
/* AIC_CISR: Interrupt Core Status Register */
/*------------------------------------------*/

#define AIC_NFIQ                        0x01    /* Core FIQ Status */
#define AIC_NIRQ                        0x02    /* Core IRQ Status */






















/*-------------------------------*/
/* Parallel I/O Controller       */
/*-------------------------------*/
typedef struct
{
    REG        PIO_PER ;           /* PIO Enable Register */
    REG        PIO_PDR ;           /* PIO Disable Register */
    REG        PIO_PSR ;           /* PIO Status Register */
    REG        Reserved0 ;
    REG        PIO_OER ;           /* Output Enable Register */
    REG        PIO_ODR ;           /* Output Disable Register */
    REG        PIO_OSR ;           /* Output Status Register */
    REG        Reserved1 ;
    REG        PIO_IFER ;          /* Input Filter Enable Register */
    REG        PIO_IFDR ;          /* Input Filter Disable Register */
    REG        PIO_IFSR ;          /* Input Filter Status Register */
    REG        Reserved2 ;
    REG        PIO_SODR ;          /* Set Output Data Register */
    REG        PIO_CODR ;          /* Clear Output Data Register */
    REG        PIO_ODSR ;          /* Output Data Status Register */
    REG        PIO_PDSR ;          /* Pin Data Status Register */
    REG        PIO_IER ;           /* Interrupt Enable Register */
    REG        PIO_IDR ;           /* Interrupt Disable Register */
    REG        PIO_IMR ;           /* Interrupt Mask Register */
    REG        PIO_ISR ;           /* Interrupt Status Register */
    REG        PIO_MDER ;          /* Multi Driver Enable Register */
    REG        PIO_MDDR ;          /* Multi Driver Disable Register */
    REG        PIO_MDSR ;          /* Multi Driver Status Register */
} PIO_REG_ST ;


#define PIOB_BASE       ((PIO_REG_ST *)0xFFFF0000)       /* Parallel I/O Controller B */
#define PIOA_BASE       ((PIO_REG_ST *)0xFFFEC000)       /* Parallel I/O Controller A */

/*----------------------------------*/
/* Parallel IO Controller Registers */
/*----------------------------------*/
/* PIOA Registers*/
#define PIOA_PER     (PIOA_BASE->PIO_PER)
#define PIOA_PDR     (PIOA_BASE->PIO_PDR)
#define PIOA_PSR     (PIOA_BASE->PIO_PSR)

#define PIOA_OER     (PIOA_BASE->PIO_OER)
#define PIOA_ODR     (PIOA_BASE->PIO_ODR)
#define PIOA_OSR     (PIOA_BASE->PIO_OSR)

#define PIOA_IFER    (PIOA_BASE->PIO_IFER)
#define PIOA_IFDR    (PIOA_BASE->PIO_IFDR)
#define PIOA_IFSR    (PIOA_BASE->PIO_IFSR)

#define PIOA_SODR    (PIOA_BASE->PIO_SODR)
#define PIOA_CODR    (PIOA_BASE->PIO_CODR)
#define PIOA_ODSR    (PIOA_BASE->PIO_ODSR)
#define PIOA_PDSR    (PIOA_BASE->PIO_PDSR)

#define PIOA_IER     (PIOA_BASE->PIO_IER)
#define PIOA_IDR     (PIOA_BASE->PIO_IDR)
#define PIOA_IMR     (PIOA_BASE->PIO_IMR)
#define PIOA_ISR     (PIOA_BASE->PIO_ISR)

#define PIOA_MDER    (PIOA_BASE->PIO_MDER)
#define PIOA_MDDR    (PIOA_BASE->PIO_MDDR)
#define PIOA_MDSR    (PIOA_BASE->PIO_MDSR)

/* PIOB Registers*/
#define PIOB_PER     (PIOB_BASE->PIO_PER)
#define PIOB_PDR     (PIOB_BASE->PIO_PDR)
#define PIOB_PSR     (PIOB_BASE->PIO_PSR)

#define PIOB_OER     (PIOB_BASE->PIO_OER)
#define PIOB_ODR     (PIOB_BASE->PIO_ODR)
#define PIOB_OSR     (PIOB_BASE->PIO_OSR)

#define PIOB_IFER    (PIOB_BASE->PIO_IFER)
#define PIOB_IFDR    (PIOB_BASE->PIO_IFDR)
#define PIOB_IFSR    (PIOB_BASE->PIO_IFSR)

#define PIOB_SODR    (PIOB_BASE->PIO_SODR)
#define PIOB_CODR    (PIOB_BASE->PIO_CODR)
#define PIOB_ODSR    (PIOB_BASE->PIO_ODSR)
#define PIOB_PDSR    (PIOB_BASE->PIO_PDSR)

#define PIOB_IER     (PIOB_BASE->PIO_IER)
#define PIOB_IDR     (PIOB_BASE->PIO_IDR)
#define PIOB_IMR     (PIOB_BASE->PIO_IMR)
#define PIOB_ISR     (PIOB_BASE->PIO_ISR)

#define PIOB_MDER    (PIOB_BASE->PIO_MDER)
#define PIOB_MDDR    (PIOB_BASE->PIO_MDDR)
#define PIOB_MDSR    (PIOB_BASE->PIO_MDSR)


/* Port A */
#define PA0             (1<<0)
#define PA1             (1<<1)
#define PA2             (1<<2)
#define PA3             (1<<3)
#define PA4             (1<<4)
#define PA5             (1<<5)
#define PA6             (1<<6)
#define PA7             (1<<7)
#define PA8             (1<<8)
#define PA9             (1<<9)
#define PA10            (1<<10)
#define PA11            (1<<11)
#define PA12            (1<<12)
#define PA13            (1<<13)
#define PA14            (1<<14)
#define PA15            (1<<15)
#define PA16            (1<<16)
#define PA17            (1<<17)
#define PA18            (1<<18)
#define PA19            (1<<19)
#define PA20            (1<<20)
#define PA21            (1<<21)
#define PA22            (1<<22)
#define PA23            (1<<23)
#define PA24            (1<<24)
#define PA25            (1<<25)
#define PA26            (1<<26)
#define PA27            (1<<27)
#define PA28            (1<<28)
#define PA29            (1<<29)
#define PA30            (1<<30)
#define PA31            (1<<31)

/* Port B */
#define PB0             (1<<0)
#define PB1             (1<<1)
#define PB2             (1<<2)
#define PB3             (1<<3)
#define PB4             (1<<4)
#define PB5             (1<<5)
#define PB6             (1<<6)
#define PB7             (1<<7)
#define PB8             (1<<8)
#define PB9             (1<<9)
#define PB10            (1<<10)
#define PB11            (1<<11)
#define PB12            (1<<12)
#define PB13            (1<<13)
#define PB14            (1<<14)
#define PB15            (1<<15)
#define PB16            (1<<16)
#define PB17            (1<<17)
#define PB18            (1<<18)
#define PB19            (1<<19)
#define PB20            (1<<20)
#define PB21            (1<<21)
#define PB22            (1<<22)
#define PB23            (1<<23)
#define PB24            (1<<24)
#define PB25            (1<<25)
#define PB26            (1<<26)
#define PB27            (1<<27)
#define PB28            (1<<28)
#define PB29            (1<<29)
#define PB30            (1<<30)
#define PB31            (1<<31)

#define NB_PIOA         30          /* Number of PIO A Lines */
#define NB_PIOB         28          /* Number of PIO B Lines */

/*------------------*/
/* Pin Multiplexing */
/*------------------*/
/* PIO Controller A */
#define PIOTCLK3       0            /* Timer 3 Clock signal */
#define PIOTIOA3       1            /* Timer 3 Signal A */
#define PIOTIOB3       2            /* Timer 3 Signal B */

#define PIOTCLK4       3            /* Timer 4 Clock signal */
#define PIOTIOA4       4            /* Timer 4 Signal A */
#define PIOTIOB4       5            /* Timer 4 Signal B */

#define PIOTCLK5       6            /* Timer 5 Clock signal */
#define PIOTIOA5       7            /* Timer 5 Signal A */
#define PIOTIOB5       8            /* Timer 5 Signal B */

#define PIOIRQ0        9            /* External Interrupt 0 */
#define PIOIRQ1       10            /* External Interrupt 1 */
#define PIOIRQ2       11            /* External Interrupt 2 */
#define PIOIRQ3       12            /* External Interrupt 3 */
#define PIOFIQ        13            /* Fast Interrupt */

#define PIOSCK0       14            /* USART 0 signal */
#define PIOTXD0       15            /* USART 0 transmit data */
#define PIORXD0       16            /* USART 0 receive data  */
#define PIOSCK1       17            /* USART 1 clock signal  */
#define PIOTXD1       18            /* USART 1 transmit data */
#define PIORXD1       19            /* USART 1 receive data  */
#define PIOSCK2       20            /* USART 2 signal */
#define PIOTXD2       21            /* USART 2 transmit data */
#define PIORXD2       22            /* USART 2 receive data  */

#define PIOSPCK       23            /* SPI clock signal */
#define PIOMISO       24            /* SPI Master In Slave */
#define PIOMOSI       25            /* SPI Master Out Slave */
#define PIONPCS0      26            /* SPI Peripheral Chip Select 0 */
#define PIONSS        PIONPCS0
#define PIONPCS1      27            /* SPI Peripheral Chip Select 1 */
#define PIONPCS2      28            /* SPI Peripheral Chip Select 2 */
#define PIONPCS3      29            /* SPI Peripheral Chip Select 3 */

/*------------------*/
/* PIO Controller B */
/*------------------*/
#define PIOIRQ4       3             /* External Interrupt 4 */
#define PIOIRQ5       4             /* External Interrupt 5 */
#define PIOSLCKIRQ    5             /* External Interrupt 6 */

#define PIOAD0TRIG    6             /* ADC 0 External trigger */
#define PIOAD1TRIG    7             /* ADC 1 External trigger */

#define PIOBMS        18            /* Boot Mode Select */

#define PIOTCLK0      19            /* Timer 0 Clock signal input */
#define PIOTIOA0      20            /* Timer 0 Signal A   */
#define PIOTIOB0      21            /* Timer 0 Signal B   */

#define PIOTCLK1      22            /* Timer 1 Clock signal */
#define PIOTIOA1      23            /* Timer 1 Signal A */
#define PIOTIOB1      24            /* Timer 1 Signal B */

#define PIOTCLK2      25            /* Timer 2 Clock signal */
#define PIOTIOA2      26            /* Timer 2 Signal A */
#define PIOTIOB2      27            /* Timer 2 Signal B */












/*---------*/
/* USARTs  */
/*---------*/

/*-------------------------------------------*/
/* USART User Interface Structure Definition */
/*-------------------------------------------*/

typedef struct
{
    REG            US_CR ;         /* Control Register */
    REG            US_MR ;         /* Mode Register */
    REG            US_IER ;        /* Interrupt Enable Register */
    REG            US_IDR ;        /* Interrupt Disable Register */
    REG            US_IMR ;        /* Interrupt Mask Register */
    REG            US_CSR ;        /* Channel Status Register */
    REG            US_RHR ;        /* Receive Holding Register */
    REG            US_THR ;        /* Transmit Holding Register */
    REG            US_BRGR ;       /* Baud Rate Generator Register */
    REG            US_RTOR ;       /* Receiver Timeout Register */
    REG            US_TTGR ;       /* Transmitter Time-guard Register */
    REG            Reserved ;
    REG            US_RPR ;        /* Receiver Pointer Register */
    REG            US_RCR ;        /* Receiver Counter Register */
    REG            US_TPR ;        /* Transmitter Pointer Register */
    REG            US_TCR ;        /* Transmitter Counter Register */
} USART_REG_ST ;

#define USART2_BASE     ((USART_REG_ST *)0xFFFC8000)     /* USART 2 */
#define USART1_BASE     ((USART_REG_ST *)0xFFFC4000)     /* USART 1 */
#define USART0_BASE     ((USART_REG_ST *)0xFFFC0000)     /* USART 0 */


/*-------------------------------*/
/* USART 0, 1 and 2 Registers    */
/*-------------------------------*/

#define US0_CR      (USART0_BASE->US_CR)
#define US1_CR      (USART1_BASE->US_CR)
#define US2_CR      (USART2_BASE->US_CR)

#define US0_MR      (USART0_BASE->US_MR)
#define US1_MR      (USART1_BASE->US_MR)
#define US2_MR      (USART2_BASE->US_MR)

#define US0_IER     (USART0_BASE->US_IER)
#define US1_IER     (USART1_BASE->US_IER)
#define US2_IER     (USART2_BASE->US_IER)

#define US0_IDR     (USART0_BASE->US_IDR)
#define US1_IDR     (USART1_BASE->US_IDR)
#define US2_IDR     (USART2_BASE->US_IDR)

#define US0_IMR     (USART0_BASE->US_IMR)
#define US1_IMR     (USART1_BASE->US_IMR)
#define US2_IMR     (USART2_BASE->US_IMR)

#define US0_CSR     (USART0_BASE->US_CSR)
#define US1_CSR     (USART1_BASE->US_CSR)
#define US2_CSR     (USART2_BASE->US_CSR)

#define US0_RHR     (USART0_BASE->US_RHR)
#define US1_RHR     (USART1_BASE->US_RHR)
#define US2_RHR     (USART2_BASE->US_RHR)

#define US0_THR     (USART0_BASE->US_THR)
#define US1_THR     (USART1_BASE->US_THR)
#define US2_THR     (USART2_BASE->US_THR)

#define US0_BRGR    (USART0_BASE->US_BRGR)
#define US1_BRGR    (USART1_BASE->US_BRGR)
#define US2_BRGR    (USART2_BASE->US_BRGR)

#define US0_RTOR    (USART0_BASE->US_RTOR)
#define US1_RTOR    (USART1_BASE->US_RTOR)
#define US2_RTOR    (USART2_BASE->US_RTOR)

#define US0_TTGR    (USART0_BASE->US_TTGR)
#define US1_TTGR    (USART1_BASE->US_TTGR)
#define US2_TTGR    (USART2_BASE->US_TTGR)

#define US0_RPR     (USART0_BASE->US_RPR)
#define US1_RPR     (USART1_BASE->US_RPR)
#define US2_RPR     (USART2_BASE->US_RPR)

#define US0_RCR     (USART0_BASE->US_RCR)
#define US1_RCR     (USART1_BASE->US_RCR)
#define US2_RCR     (USART2_BASE->US_RCR)

#define US0_TPR     (USART0_BASE->US_TPR)
#define US1_TPR     (USART1_BASE->US_TPR)
#define US2_TPR     (USART2_BASE->US_TPR)

#define US0_TCR     (USART0_BASE->US_TCR)
#define US1_TCR     (USART1_BASE->US_TCR)
#define US2_TCR     (USART2_BASE->US_TCR)


/*--------------------------*/
/* US_CR : Control Register */
/*--------------------------*/

#define US_RSTRX                0x0004      /* Reset Receiver */
#define US_RSTTX                0x0008      /* Reset Transmitter */
#define US_RXEN                 0x0010      /* Receiver Enable */
#define US_RXDIS                0x0020      /* Receiver Disable */
#define US_TXEN                 0x0040      /* Transmitter Enable */
#define US_TXDIS                0x0080      /* Transmitter Disable */
#define US_RSTSTA               0x0100      /* Reset Status Bits */
#define US_STTBRK               0x0200      /* Start Break */
#define US_STPBRK               0x0400      /* Stop Break */
#define US_STTTO                0x0800      /* Start Time-out */
#define US_SENDA                0x1000      /* Send Address */

/*-----------------------*/
/* US_MR : Mode Register */
/*-----------------------*/

#define US_CLKS                 0x0030      /* Clock Selection */
#define US_CLKS_MCK             0x00        /* Master Clock */
#define US_CLKS_MCK8            0x10        /* Master Clock divided by 8 */
#define US_CLKS_SCK             0x20        /* External Clock */
#define US_CLKS_SLCK            0x30        /* Slow Clock */

#define US_CHRL                 0x00C0      /* Byte Length */
#define US_CHRL_5               0x00        /* 5 bits */
#define US_CHRL_6               0x40        /* 6 bits */
#define US_CHRL_7               0x80        /* 7 bits */
#define US_CHRL_8               0xC0        /* 8 bits */

#define US_SYNC                 0x0100      /* Synchronous Mode Enable */

#define US_PAR                  0x0E00      /* Parity Mode */
#define US_PAR_EVEN             0x00        /* Even Parity */
#define US_PAR_ODD              0x200       /* Odd Parity */
#define US_PAR_SPACE            0x400       /* Space Parity to 0 */
#define US_PAR_MARK             0x600       /* Marked Parity to 1 */
#define US_PAR_NO               0x800       /* No Parity */
#define US_PAR_MULTIDROP        0xC00       /* Multi-drop Mode */

#define US_NBSTOP               0x3000      /* Stop Bit Number */
#define US_NBSTOP_1             0x0000      /* 1 Stop Bit */
#define US_NBSTOP_1_5           0x1000      /* 1.5 Stop Bits */
#define US_NBSTOP_2             0x2000      /* 2 Stop Bits */

#define US_CHMODE                   0xC000  /* Channel Mode */
#define US_CHMODE_NORMAL            0x0000  /* Normal Mode */
#define US_CHMODE_AUTOMATIC_ECHO    0x4000  /* Automatic Echo */
#define US_CHMODE_LOCAL_LOOPBACK    0x8000  /* Local Loopback */
#define US_CHMODE_REMOTE_LOOPBACK   0xC000  /* Remote Loopback */

#define US_MODE9                0x20000     /* 9 Bit Mode */

#define US_CLKO                 0x40000     /* Baud Rate Output Enable */

/* Mode Register model */

/* Standard Asynchronous Mode : 8 bits , 1 stop , no parity */
#define US_ASYNC_MODE ( US_CHMODE_NORMAL + \
                        US_NBSTOP_1 + \
                        US_PAR_NO + \
                        US_CHRL_8 + \
                        US_CLKS_MCK )

/* Standard External Asynchronous Mode : 8 bits , 1 stop , no parity */
#define US_ASYNC_SCK_MODE ( US_CHMODE_NORMAL + \
                            US_NBSTOP_1 + \
                            US_PAR_NO + \
                            US_CHRL_8 + \
                            US_CLKS_SCK )

/* Standard Synchronous Mode : 8 bits , 1 stop , no parity */
#define US_SYNC_MODE ( US_SYNC + \
                       US_CHMODE_NORMAL + \
                       US_NBSTOP_1 + \
                       US_PAR_NO + \
                       US_CHRL_8 + \
                       US_CLKS_MCK )

/* SCK used Label */
#define SCK_USED (US_CLKO | US_CLKS_SCK)

/*---------------------------------------------------------------*/
/* US_IER, US_IDR, US_IMR, US_IMR: Status and Interrupt Register */
/*---------------------------------------------------------------*/

#define US_RXRDY            0x1       /* Receiver Ready */
#define US_TXRDY            0x2       /* Transmitter Ready */
#define US_RXBRK            0x4       /* Receiver Break */
#define US_ENDRX            0x8       /* End of Receiver PDC Transfer */
#define US_ENDTX            0x10       /* End of Transmitter PDC Transfer */
#define US_OVRE             0x20       /* Overrun Error */
#define US_FRAME            0x40       /* Framing Error */
#define US_PARE             0x80       /* Parity Error */
#define US_TIMEOUT          0x100       /* Receiver Timeout */
#define US_TXEMPTY          0x200       /* Transmitter Empty */

#define US_MASK_IRQ_TX      (US_TXRDY | US_ENDTX | US_TXEMPTY)
#define US_MASK_IRQ_RX      (US_RXRDY | US_ENDRX | US_TIMEOUT)
#define US_MASK_IRQ_ERROR   (US_PARE | US_FRAME | US_OVRE | US_RXBRK)












/*-----------------*/
/* Real Time Clock */
/*-----------------*/
/*--------------------------------------*/
/* Real Time Clock Structure Definition */
/*--------------------------------------*/
typedef struct
{
    REG       RTC_CR ;     /* Control Register */
    REG       RTC_MR ;     /* Mode Register */
    REG       RTC_TIMR ;   /* Time Register */
    REG       RTC_CALR ;   /* Calendar Register */
    REG       RTC_TAR ;    /* Time Alarm Register */
    REG       RTC_CAR ;    /* Calendar Alarm Register */
    REG       RTC_SR ;     /* Status Register */
    REG       RTC_SCR ;    /* Status Clear Register */
    REG       RTC_IER ;    /* Interrupt Enable Register */
    REG       RTC_IDR ;    /* Interrupt Disable Register */
    REG       RTC_IMR ;    /* Interrupt Mask Register */
    REG       RTC_VER ;    /* Valid Entry Register */
} RTC_REG_ST;

#define RTC_BASE        ((RTC_REG_ST *)0xFFFB8000)       /* Real Time Clock */

/*----------------------------*/
/* Real Time Clock Registers  */
/*----------------------------*/

#define RTC_CR      (RTC_BASE->RTC_CR)
#define RTC_MR      (RTC_BASE->RTC_MR)
#define RTC_TIMR    (RTC_BASE->RTC_TIMR)
#define RTC_CALR    (RTC_BASE->RTC_CALR)
#define RTC_TAR     (RTC_BASE->RTC_TAR)
#define RTC_CAR     (RTC_BASE->RTC_CAR)
#define RTC_SR      (RTC_BASE->RTC_SR)
#define RTC_SCR     (RTC_BASE->RTC_SCR)

#define RTC_IER     (RTC_BASE->RTC_IER)
#define RTC_IDR     (RTC_BASE->RTC_IDR)
#define RTC_IMR     (RTC_BASE->RTC_IMR)
#define RTC_VER     (RTC_BASE->RTC_VER)

/*--------------------------------------------*/
/* RTC_CR: Control Register bits definition  */
/*-------------------------------------------*/
#define     RTC_UPDTIM              0x00000001     /* Update Request Time Register */
#define     RTC_UPDCAL              0x00000002     /* Update Request Calendar Register */
#define     RTC_UPD_MASQ            0x00000003     /* Update Request masque*/

#define     RTC_TEVSEL_MN_CHG       0x000       /* Time Event Selection : Minute change */
#define     RTC_TEVSEL_HR_CHG       0x100       /* Time Event Selection : Hour change */
#define     RTC_TEVSEL_EVDAY_MD     0x200       /* Time Event Selection : Every Day at Midnight */
#define     RTC_TEVSEL_EVDAY_NOON   0x300       /* Time Event Selection : Every Day at Noon */
#define     RTC_TEVSEL_MASQ         0x300       /* Update TEVSEL masque*/

#define     RTC_CEVSEL_WEEK_CHG     0x00000     /* Calendar Event Selection : Week Change (every Monday @ 00:00:00) */
#define     RTC_CEVSEL_MONTH_CHG    0x10000     /* Calendar Event Selection : Month Change (every 01 of each month @ 00:00:00) */
#define     RTC_CEVSEL_YEAR_CHG     0x20000     /* Calendar Event Selection : Year Change (every january 1st at 00:00:00) */
#define     RTC_CEVSEL_MASQ         0x30000     /* Updat eCEVSEL masque*/

/*-------------------------------------------*/
/* RTC_MR: Mode Register bits definition     */
/*-------------------------------------------*/
#define     RTC_24_HRMOD        0x0     /* 24-Hour Mode is selected */
#define     RTC_12_HRMOD        0x1     /* 12-Hour Mode is selected */

/*---------------------------------------------*/
/* RTC_TIMR: Time Register bits definition     */
/*---------------------------------------------*/
#define     RTC_AM          (0<<22)         /* AM Indicator */
#define     RTC_PM          0x400000        /* PM Indicator */
#define     RTC_MASQ_SEC    0x0000007F
#define     RTC_MIN         8
#define     RTC_MASQ_MIN    0x00007F00
#define     RTC_HOUR        16
#define     RTC_MASQ_HOUR   0x003F0000
#define     RTC_AMPM        22
#define     RTC_MASQ_AMPM   0x00400000

/*--------------------------------------------------*/
/* RTC_CALR:  Calendar Register bits definition     */
/*--------------------------------------------------*/
#define     RTC_CENT        0
#define     RTC_MASQ_CENT   0x0000003F
#define     RTC_YEAR        8
#define     RTC_MASQ_YEAR   0x0000FF00
#define     RTC_MONTH       16
#define     RTC_MASQ_MONTH  0x001F0000
#define     RTC_DAY         21
#define     RTC_MASQ_DAY    0x00E00000
#define     RTC_DATE        24
#define     RTC_MASQ_DATE   0x3F000000


/*----------------------------------------------*/
/* RTC_TAR: Time Alarm Register bits definition */
/*----------------------------------------------*/
#define     RTC_SEC_ALRM_DIS        (0<<7)      /* Second Alarm Disable */
#define     RTC_SEC_ALRM_EN         0x80        /* Second Alarm Enable */

#define     RTC_MIN_ALRM_DIS        (0<<15)     /* Minute Alarm Disable */
#define     RTC_MIN_ALRM_EN         0x8000      /* Minute Alarm Enable */

#define     RTC_HOUR_ALRM_DIS       (0<<23)     /* Hour Alarm Disable */
#define     RTC_HOUR_ALRM_EN        0x800000    /* Hour Alarm Enable */

/*--------------------------------------------------*/
/* RTC_CAR: Calendar Alarm Register bits definition */
/*--------------------------------------------------*/
#define     RTC_MONTH_ALRM_DIS      (0<<23)     /* Month Alarm Disable */
#define     RTC_MONTH_ALRM_EN       0x800000    /* Month Alarm Enable */

#define     RTC_DATE_ALRM_DIS       (0<<31)     /* Date Alarm Disable */
#define     RTC_DATE_ALRM_EN        0x80000000   /* Date Alarm Enable */

/*-------------------------------------------------------------------------------*/
/* RTC Status, Interrupt Clear, Enable,Disable and Mask Register bits definition */
/*-------------------------------------------------------------------------------*/
#define     RTC_ACKUPD              0x1         /* Acknowledge for Update */
#define     RTC_ALARM               0x2         /* Alarm Flag */
#define     RTC_SEC                 0x4         /* Second Event */
#define     RTC_TIMEV               0x8         /* Time Event */
#define     RTC_CALEV               0x10        /* Calendar Event */

/*-------------------------------------------------*/
/* RTC_VER:Valid Entry Register bits definition    */
/*-------------------------------------------------*/
#define     RTC_NVT                 0x1         /* Non-Valid Time */
#define     RTC_NVC                 0x2         /* Non-Valid Calendar */
#define     RTC_NVTAL               0x4         /* Non-Valid Time Alarm */
#define     RTC_NVCAL               0x8         /* Non-Valid Calendar Alarm */

















/*---------------*/
/* Timer Counter */
/*---------------*/
/*-------------------------------------------*/
/* Timer User Interface Structure Definition */
/*-------------------------------------------*/

typedef struct
{
    REG        TC_CCR ;        /* Control Register */
    REG        TC_CMR ;        /* Mode Register */
    REG        Reserved0 ;
    REG        Reserved1 ;
    REG        TC_CV ;         /* Counter value */
    REG        TC_RA ;         /* Register A */
    REG        TC_RB ;         /* Register B */
    REG        TC_RC ;         /* Register C */
    REG        TC_SR ;         /* Status Register */
    REG        TC_IER ;        /* Interrupt Enable Register */
    REG        TC_IDR ;        /* Interrupt Disable Register */
    REG        TC_IMR ;        /* Interrupt Mask Register */
    REG        Reserved2 ;
    REG        Reserved3 ;
    REG        Reserved4 ;
    REG        Reserved5 ;
} TC_REG_ST ;

#define NB_TC_CHANNEL       3

typedef struct
{
    TC_REG_ST        TC[NB_TC_CHANNEL] ;
    REG        TC_BCR ;        /* Block Control Register */
    REG        TC_BMR ;        /* Block Mode Register  */
} TC_BLOCK_ST ;


#define TCB1_BASE       ((TC_BLOCK_ST *)0xFFFD4000)   /* Channels 3, 4, 5 */
#define TCB0_BASE       ((TC_BLOCK_ST *)0xFFFD0000)   /* Channels 0, 1, 2 */


/*-------------------------*/
/* Timer Counter Registers */
/*-------------------------*/

#define TC0_BASE    (TCB0_BASE->TC[0])
#define TC1_BASE    (TCB0_BASE->TC[1])
#define TC2_BASE    (TCB0_BASE->TC[2])
#define TC3_BASE    (TCB1_BASE->TC[0])
#define TC4_BASE    (TCB1_BASE->TC[1])
#define TC5_BASE    (TCB1_BASE->TC[2])

#define TC0_BCR     (TCB0_BASE->TC_BCR)
#define TC1_BCR     (TCB0_BASE->TC_BCR)
#define TC2_BCR     (TCB0_BASE->TC_BCR)
#define TC3_BCR     (TCB1_BASE->TC_BCR)
#define TC4_BCR     (TCB1_BASE->TC_BCR)
#define TC5_BCR     (TCB1_BASE->TC_BCR)

#define TC0_BMR     (TCB0_BASE->TC_BMR)
#define TC1_BMR     (TCB0_BASE->TC_BMR)
#define TC2_BMR     (TCB0_BASE->TC_BMR)
#define TC3_BMR     (TCB1_BASE->TC_BMR)
#define TC4_BMR     (TCB1_BASE->TC_BMR)
#define TC5_BMR     (TCB1_BASE->TC_BMR)

#define TC0_CCR     (TC0_BASE.TC_CCR)
#define TC0_CMR     (TC0_BASE.TC_CMR)
#define TC0_CV      (TC0_BASE.TC_CV)
#define TC0_RA      (TC0_BASE.TC_RA)
#define TC0_RB      (TC0_BASE.TC_RB)
#define TC0_RC      (TC0_BASE.TC_RC)
#define TC0_SR      (TC0_BASE.TC_SR)
#define TC0_IER     (TC0_BASE.TC_IER)
#define TC0_IDR     (TC0_BASE.TC_IDR)
#define TC0_IMR     (TC0_BASE.TC_IMR)

#define TC1_CCR     (TC1_BASE.TC_CCR)
#define TC1_CMR     (TC1_BASE.TC_CMR)
#define TC1_CV      (TC1_BASE.TC_CV)
#define TC1_RA      (TC1_BASE.TC_RA)
#define TC1_RB      (TC1_BASE.TC_RB)
#define TC1_RC      (TC1_BASE.TC_RC)
#define TC1_SR      (TC1_BASE.TC_SR)
#define TC1_IER     (TC1_BASE.TC_IER)
#define TC1_IDR     (TC1_BASE.TC_IDR)
#define TC1_IMR     (TC1_BASE.TC_IMR)

#define TC2_CCR     (TC2_BASE.TC_CCR)
#define TC2_CMR     (TC2_BASE.TC_CMR)
#define TC2_CV      (TC2_BASE.TC_CV)
#define TC2_RA      (TC2_BASE.TC_RA)
#define TC2_RB      (TC2_BASE.TC_RB)
#define TC2_RC      (TC2_BASE.TC_RC)
#define TC2_SR      (TC2_BASE.TC_SR)
#define TC2_IER     (TC2_BASE.TC_IER)
#define TC2_IDR     (TC2_BASE.TC_IDR)
#define TC2_IMR     (TC2_BASE.TC_IMR)

#define TC3_CCR     (TC3_BASE.TC_CCR)
#define TC3_CMR     (TC3_BASE.TC_CMR)
#define TC3_CV      (TC3_BASE.TC_CV)
#define TC3_RA      (TC3_BASE.TC_RA)
#define TC3_RB      (TC3_BASE.TC_RB)
#define TC3_RC      (TC3_BASE.TC_RC)
#define TC3_SR      (TC3_BASE.TC_SR)
#define TC3_IER     (TC3_BASE.TC_IER)
#define TC3_IDR     (TC3_BASE.TC_IDR)
#define TC3_IMR     (TC3_BASE.TC_IMR)

#define TC4_CCR     (TC4_BASE.TC_CCR)
#define TC4_CMR     (TC4_BASE.TC_CMR)
#define TC4_CV      (TC4_BASE.TC_CV)
#define TC4_RA      (TC4_BASE.TC_RA)
#define TC4_RB      (TC4_BASE.TC_RB)
#define TC4_RC      (TC4_BASE.TC_RC)
#define TC4_SR      (TC4_BASE.TC_SR)
#define TC4_IER     (TC4_BASE.TC_IER)
#define TC4_IDR     (TC4_BASE.TC_IDR)
#define TC4_IMR     (TC4_BASE.TC_IMR)

#define TC5_CCR     (TC5_BASE.TC_CCR)
#define TC5_CMR     (TC5_BASE.TC_CMR)
#define TC5_CV      (TC5_BASE.TC_CV)
#define TC5_RA      (TC5_BASE.TC_RA)
#define TC5_RB      (TC5_BASE.TC_RB)
#define TC5_RC      (TC5_BASE.TC_RC)
#define TC5_SR      (TC5_BASE.TC_SR)
#define TC5_IER     (TC5_BASE.TC_IER)
#define TC5_IDR     (TC5_BASE.TC_IDR)
#define TC5_IMR     (TC5_BASE.TC_IMR)

/*--------------------------------------------------------*/
/* TC_CCR: Timer Counter Control Register Bits Definition */
/*--------------------------------------------------------*/
#define TC_CLKEN            0x1
#define TC_CLKDIS           0x2
#define TC_SWTRG            0x4

/*---------------------------------------------------------------*/
/* TC_CMR: Timer Counter Channel Mode Register Bits Definition   */
/*---------------------------------------------------------------*/

/*-----------------*/
/* Clock Selection */
/*-----------------*/
#define TC_CLKS                  0x7
#define TC_CLKS_MCK2             0x0
#define TC_CLKS_MCK8             0x1
#define TC_CLKS_MCK32            0x2
#define TC_CLKS_MCK128           0x3
#define TC_CLKS_MCK1024          0x4

#define TC_CLKS_SLCK             0x4

#define TC_CLKS_XC0              0x5
#define TC_CLKS_XC1              0x6
#define TC_CLKS_XC2              0x7


/*-----------------*/
/* Clock Inversion */
/*-----------------*/
#define TC_CLKI             0x8

/*------------------------*/
/* Burst Signal Selection */
/*------------------------*/
#define TC_BURST            0x30
#define TC_BURST_NONE       0x0
#define TC_BUSRT_XC0        0x10
#define TC_BURST_XC1        0x20
#define TC_BURST_XC2        0x30

/*------------------------------------------------------*/
/* Capture Mode : Counter Clock Stopped with RB Loading */
/*------------------------------------------------------*/
#define TC_LDBSTOP          0x40

/*-------------------------------------------------------*/
/* Waveform Mode : Counter Clock Stopped with RC Compare */
/*-------------------------------------------------------*/
#define TC_CPCSTOP          0x40

/*-------------------------------------------------------*/
/* Capture Mode : Counter Clock Disabled with RB Loading */
/*--------------------------------------------------------*/
#define TC_LDBDIS           0x80

/*--------------------------------------------------------*/
/* Waveform Mode : Counter Clock Disabled with RC Compare */
/*--------------------------------------------------------*/
#define TC_CPCDIS           0x80

/*------------------------------------------------*/
/* Capture Mode : External Trigger Edge Selection */
/*------------------------------------------------*/
#define TC_ETRGEDG                  0x300
#define TC_ETRGEDG_EDGE_NONE        0x0
#define TC_ETRGEDG_RISING_EDGE      0x100
#define TC_ETRGEDG_FALLING_EDGE     0x200
#define TC_ETRGEDG_BOTH_EDGE        0x300

/*-----------------------------------------------*/
/* Waveform Mode : External Event Edge Selection */
/*-----------------------------------------------*/
#define TC_EEVTEDG                  0x300
#define TC_EEVTEDG_EDGE_NONE        0x0
#define TC_EEVTEDG_RISING_EDGE      0x100
#define TC_EEVTEDG_FALLING_EDGE     0x200
#define TC_EEVTEDG_BOTH_EDGE        0x300

/*--------------------------------------------------------*/
/* Capture Mode : TIOA or TIOB External Trigger Selection */
/*--------------------------------------------------------*/
#define TC_ABETRG                   0x400
#define TC_ABETRG_TIOB              0x0
#define TC_ABETRG_TIOA              0x400

/*------------------------------------------*/
/* Waveform Mode : External Event Selection */
/*------------------------------------------*/
#define TC_EEVT                     0xC00
#define TC_EEVT_TIOB                0x0
#define TC_EEVT_XC0                 0x400
#define TC_EEVT_XC1                 0x800
#define TC_EEVT_XC2                 0xC00

/*--------------------------------------------------*/
/* Waveform Mode : Enable Trigger on External Event */
/*--------------------------------------------------*/
#define TC_ENETRG                   0x1000

/*----------------------------------*/
/* RC Compare Enable Trigger Enable */
/*----------------------------------*/
#define TC_CPCTRG                   0x4000

/*----------------*/
/* Mode Selection */
/*----------------*/
#define TC_WAVE                     0x8000
#define TC_CAPT                     0x0

/*-------------------------------------*/
/* Capture Mode : RA Loading Selection */
/*-------------------------------------*/
#define TC_LDRA                     0x30000
#define TC_LDRA_EDGE_NONE           0x0
#define TC_LDRA_RISING_EDGE         0x10000
#define TC_LDRA_FALLING_EDGE        0x20000
#define TC_LDRA_BOTH_EDGE           0x30000

/*-------------------------------------------*/
/* Waveform Mode : RA Compare Effect on TIOA */
/*-------------------------------------------*/
#define TC_ACPA                     0x30000
#define TC_ACPA_OUTPUT_NONE         0x0
#define TC_ACPA_SET_OUTPUT          0x10000
#define TC_ACPA_CLEAR_OUTPUT        0x20000
#define TC_ACPA_TOGGLE_OUTPUT       0x30000

/*-------------------------------------*/
/* Capture Mode : RB Loading Selection */
/*-------------------------------------*/
#define TC_LDRB                     0xC0000
#define TC_LDRB_EDGE_NONE           0x0
#define TC_LDRB_RISING_EDGE         0x40000
#define TC_LDRB_FALLING_EDGE        0x80000
#define TC_LDRB_BOTH_EDGE           0xC0000

/*-------------------------------------------*/
/* Waveform Mode : RC Compare Effect on TIOA */
/*-------------------------------------------*/
#define TC_ACPC                     0xC0000
#define TC_ACPC_OUTPUT_NONE         0x0
#define TC_ACPC_SET_OUTPUT          0x40000
#define TC_ACPC_CLEAR_OUTPUT        0x80000
#define TC_ACPC_TOGGLE_OUTPUT       0xC0000

/*-----------------------------------------------*/
/* Waveform Mode : External Event Effect on TIOA */
/*-----------------------------------------------*/
#define TC_AEEVT                    0x300000
#define TC_AEEVT_OUTPUT_NONE        0x0
#define TC_AEEVT_SET_OUTPUT         0x100000
#define TC_AEEVT_CLEAR_OUTPUT       0x200000
#define TC_AEEVT_TOGGLE_OUTPUT      0x300000

/*-------------------------------------------------*/
/* Waveform Mode : Software Trigger Effect on TIOA */
/*-------------------------------------------------*/
#define TC_ASWTRG                   0xC00000
#define TC_ASWTRG_OUTPUT_NONE       0x0
#define TC_ASWTRG_SET_OUTPUT        0x400000
#define TC_ASWTRG_CLEAR_OUTPUT      0x800000
#define TC_ASWTRG_TOGGLE_OUTPUT     0xC00000

/*-------------------------------------------*/
/* Waveform Mode : RB Compare Effect on TIOB */
/*-------------------------------------------*/
#define TC_BCPB                     0x1000000
#define TC_BCPB_OUTPUT_NONE         0x0
#define TC_BCPB_SET_OUTPUT          0x1000000
#define TC_BCPB_CLEAR_OUTPUT        0x2000000
#define TC_BCPB_TOGGLE_OUTPUT       0x3000000

/*-------------------------------------------*/
/* Waveform Mode : RC Compare Effect on TIOB */
/*-------------------------------------------*/
#define TC_BCPC                     0xC000000
#define TC_BCPC_OUTPUT_NONE         0x0
#define TC_BCPC_SET_OUTPUT          0x4000000
#define TC_BCPC_CLEAR_OUTPUT        0x8000000
#define TC_BCPC_TOGGLE_OUTPUT       0xC000000

/*-----------------------------------------------*/
/* Waveform Mode : External Event Effect on TIOB */
/*-----------------------------------------------*/
#define TC_BEEVT                    0x30000000      //* bit 29-28
#define TC_BEEVT_OUTPUT_NONE        0x0
#define TC_BEEVT_SET_OUTPUT         0x10000000      //* bit 29-28  01
#define TC_BEEVT_CLEAR_OUTPUT       0x20000000      //* bit 29-28  10
#define TC_BEEVT_TOGGLE_OUTPUT      0x30000000      //* bit 29-28  11

/*- -----------------------------------------------*/
/* Waveform Mode : Software Trigger Effect on TIOB */
/*-------------------------------------------------*/
#define TC_BSWTRG                   0xC0000000
#define TC_BSWTRG_OUTPUT_NONE       0x0
#define TC_BSWTRG_SET_OUTPUT        0x40000000
#define TC_BSWTRG_CLEAR_OUTPUT      0x80000000
#define TC_BSWTRG_TOGGLE_OUTPUT     0xC0000000

/*------------------------------------------------------*/
/* TC_SR: Timer Counter Status Register Bits Definition */
/*------------------------------------------------------*/
#define TC_COVFS            0x1         /* Counter Overflow Status */
#define TC_LOVRS            0x2         /* Load Overrun Status */
#define TC_CPAS             0x4         /* RA Compare Status */
#define TC_CPBS             0x8         /* RB Compare Status */
#define TC_CPCS             0x10        /* RC Compare Status */
#define TC_LDRAS            0x20        /* RA Loading Status */
#define TC_LDRBS            0x40        /* RB Loading Status */
#define TC_ETRGS            0x80        /* External Trigger Status */
#define TC_CLKSTA           0x10000     /* Clock Status */
#define TC_MTIOA            0x20000     /* TIOA Mirror */
#define TC_MTIOB            0x40000     /* TIOB Status */

/*--------------------------------------------------------------*/
/* TC_BCR: Timer Counter Block Control Register Bits Definition */
/*--------------------------------------------------------------*/
#define TC_SYNC             0x1         /* Synchronisation Trigger */

/*------------------------------------------------------------*/
/*  TC_BMR: Timer Counter Block Mode Register Bits Definition */
/*------------------------------------------------------------*/
#define TC_TC0XC0S          0x3        /* External Clock Signal 0 Selection */
#define TC_TCLK0XC0         0x0
#define TC_NONEXC0          0x1
#define TC_TIOA1XC0         0x2
#define TC_TIOA2XC0         0x3

#define TC_TC1XC1S          0xC        /* External Clock Signal 1 Selection */
#define TC_TCLK1XC1         0x0
#define TC_NONEXC1          0x4
#define TC_TIOA0XC1         0x8
#define TC_TIOA2XC1         0xC

#define TC_TC2XC2S          0x30       /* External Clock Signal 2 Selection */
#define TC_TCLK2XC2         0x0
#define TC_NONEXC2          0x10
#define TC_TIOA0XC2         0x20
#define TC_TIOA1XC2         0x30














/*-----------------------------*/
/* Analog to Digital Converter */
/*-----------------------------*/
//#include    "../adc/lib_adc.h"
/*--------------------------*/
/* ADC Structure Definition */
/*--------------------------*/
typedef struct
{
    REG        ADC_CR ;            /* Control Register */
    REG        ADC_MR ;            /* Mode Register */
    REG        Reserved0 ;
    REG        Reserved1 ;
    REG        ADC_CHER ;          /* Channel Enable Register */
    REG        ADC_CHDR ;          /* Channel Disable Register */
    REG        ADC_CHSR ;          /* Channel Status Register */
    REG        Reserved2 ;
    REG        ADC_SR ;            /* Status Register */
    REG        ADC_IER ;           /* Interrupt Enable Register */
    REG        ADC_IDR ;           /* Interrupt Disable  Register */
    REG        ADC_IMR ;           /* Interrupt Mask Register */
    REG        ADC_CDR[4] ;        /* Channel Data Registers */
} ADC_REG_ST ;

#define ADC1_BASE       ((ADC_REG_ST  *)0xFFFB4000)       /* Analog to Digital Converter 1 */
#define ADC0_BASE       ((ADC_REG_ST  *)0xFFFB0000)       /* Analog to Digital Converter 0 */

/*-----------------------*/
/* ADC 0 and 1 Registers */
/*-----------------------*/
#define ADC0_CR      (ADC0_BASE->ADC_CR)
#define ADC1_CR      (ADC1_BASE->ADC_CR)

#define ADC0_MR      (ADC0_BASE->ADC_MR)
#define ADC1_MR      (ADC1_BASE->ADC_MR)

#define ADC0_CHER    (ADC0_BASE->ADC_CHER)
#define ADC1_CHER    (ADC1_BASE->ADC_CHER)

#define ADC0_CHDR    (ADC0_BASE->ADC_CHDR)
#define ADC1_CHDR    (ADC1_BASE->ADC_CHDR)

#define ADC0_CHSR    (ADC0_BASE->ADC_CHSR)
#define ADC1_CHSR    (ADC1_BASE->ADC_CHSR)

#define ADC0_SR      (ADC0_BASE->ADC_SR)
#define ADC1_SR      (ADC1_BASE->ADC_SR)

#define ADC0_IER     (ADC0_BASE->ADC_IER)
#define ADC1_IER     (ADC1_BASE->ADC_IER)

#define ADC0_IDR     (ADC0_BASE->ADC_IDR)
#define ADC1_IDR     (ADC1_BASE->ADC_IDR)

#define ADC0_IMR     (ADC0_BASE->ADC_IMR)
#define ADC1_IMR     (ADC1_BASE->ADC_IMR)

#define ADC0_CDR0    (ADC0_BASE->ADC_CDR0)
#define ADC1_CDR0    (ADC1_BASE->ADC_CDR0)

#define ADC0_CDR1    (ADC0_BASE->ADC_CDR1)
#define ADC1_CDR1    (ADC1_BASE->ADC_CDR1)

#define ADC0_CDR2    (ADC0_BASE->ADC_CDR2)
#define ADC1_CDR2    (ADC1_BASE->ADC_CDR2)

#define ADC0_CDR3    (ADC0_BASE->ADC_CDR3)
#define ADC1_CDR3    (ADC1_BASE->ADC_CDR3)

/*------------------------------------------*/
/* ADC_CR: Control Register Bits Definition */
/*------------------------------------------*/
#define     ADC_SWRST           (1<<0)      /* ADC Software Reset */
#define     ADC_START           (1<<1)      /* ADC Start */

/*---------------------------------------*/
/* ADC_MR: Mode Register Bits Definition */
/*---------------------------------------*/
#define ADC_TRGEN_DIS      0x0         /* Trigger Disable */
#define ADC_TRGEN_EN       0x1         /* Trigger Enable */

/* Trigger Selection */
#define ADC_B_TTRGSEL       1
#define ADC_TRG_TIOA0       0x0         /* TIOA0 Trigger Selection */
#define ADC_TRG_TIOA1       0x2         /* TIOA1 Trigger Selection */
#define ADC_TRG_TIOA2       0x4         /* TIOA2 Trigger Selection */
#define ADC_TRG_TIOA3       0x6         /* TIOA3 Trigger Selection */
#define ADC_TRG_TIOA4       0x8         /* TIOA4 Trigger Selection */
#define ADC_TRG_TIOA5       0xA         /* TIOA5 Trigger Selection */
#define ADC_TRG_EXT         0xC         /* External Trigger Selection */

#define ADC_10_BIT_RES      (0<<4)      /* 10 bits ADC Resolution */
#define ADC_8_BIT_RES       (1<<4)      /*  8 bits ADC Resolution */

#define ADC_NORMAL_MODE     (0<<5)      /* ADC Normal Mode */
#define ADC_SLEEP_MODE      0x20        /* ADC Sleep Mode */

#define ADC_PRESCAL         (0x3F<<8)   /* Max Prescaler value */
#define ADC_B_PRESCAL       8           /* bit shift */

/*--------------------------------------------------------------------------*/
/* ADC_CHER,ADC_CHDR,ADC_CHSR: Channel Enable, Disable and Status Registers */
/*--------------------------------------------------------------------------*/
#define ADC_CH0             0x1     /* Channel 0 Enable/Disable */
#define ADC_CH1             0x2     /* Channel 1 Enable/Disable */
#define ADC_CH2             0x4     /* Channel 2 Enable/Disable */
#define ADC_CH3             0x8     /* Channel 3 Enable/Disable */

/*-------------------------------------------------------------------------*/
/* ADC_SR,ADC_IER,ADC_IDR,ADC_IMR: Status, Enable, Disable, Mask Registers */
/*-------------------------------------------------------------------------*/
#define ADC_EOC0            0x1     /* End of Conversion Channel 0 */
#define ADC_EOC1            0x2     /* End of Conversion Channel 1 */
#define ADC_EOC2            0x4     /* End of Conversion Channel 2 */
#define ADC_EOC3            0x8     /* End of Conversion Channel 3 */

#define ADC_OVRE0           0x1     /* Overrun Interrupt Error Channel 0 */
#define ADC_OVRE1           0x2     /* Overrun Interrupt Error Channel 1 */
#define ADC_OVRE2           0x4     /* Overrun Interrupt Error Channel 2 */
#define ADC_OVRE3           0x8     /* Overrun Interrupt Error Channel 3 */

/*-------------------------------*/
/* ADC_CDR:Convert Data Register */
/*-------------------------------*/

#define ADC_DATA_10BITS    0x3FF
#define ADC_DATA_8BITS     0x0FF















/*------------------------------*/
/* Digital to Analog Converter  */
/*------------------------------*/
//#include    "../dac/lib_dac.h"
/*--------------------------*/
/* DAC Structure Definition */
/*--------------------------*/

typedef struct
{
    REG        DAC_CR ;            /* Control Register */
    REG        DAC_MR ;            /* Mode Register */
    REG        DAC_DHR ;           /* Data Holding Register */
    REG        DAC_DOR ;           /* Data Output Register */
    REG        DAC_SR ;            /* Status Register */
    REG        DAC_IER ;           /* Interrupt Enable Register */
    REG        DAC_IDR ;           /* Interrupt Disable  Register */
    REG        DAC_IMR ;           /* Interrupt Mask Register */
} DAC_REG_ST ;


#define DAC1_BASE       ((DAC_REG_ST *)0xFFFAC000)       /* DAC 1 */
#define DAC0_BASE       ((DAC_REG_ST *)0xFFFA8000)       /* DAC 0 */

/*-----------------------*/
/* DAC 0 and 1 Registers */
/*-----------------------*/

#define DAC0_CR      (DAC0_BASE->DAC_CR)
#define DAC1_CR      (DAC1_BASE->DAC_CR)

#define DAC0_MR      (DAC0_BASE->DAC_MR)
#define DAC1_MR      (DAC1_BASE->DAC_MR)

#define DAC0_DHR     (DAC0_BASE->DAC_DHR)
#define DAC1_DHR     (DAC1_BASE->DAC_DHR)

#define DAC0_DOR     (DAC0_BASE->DAC_DOR)
#define DAC1_DOR     (DAC1_BASE->DAC_DOR)

#define DAC0_SR      (DAC0_BASE->DAC_SR)
#define DAC1_SR      (DAC1_BASE->DAC_SR)

#define DAC0_IER     (DAC0_BASE->DAC_IER)
#define DAC1_IER     (DAC1_BASE->DAC_IER)

#define DAC0_IDR     (DAC0_BASE->DAC_IDR)
#define DAC1_IDR     (DAC1_BASE->DAC_IDR)

#define DAC0_IMR     (DAC0_BASE->DAC_IMR)
#define DAC1_IMR     (DAC1_BASE->DAC_IMR)

/*--------------------------*/
/* DAC_CR: Control Register */
/*--------------------------*/

#define DAC_SWRST       (1<<0)          //* Reset the DAC
#define DAC_LOOPEN      (1<<1)          //* Automatic reaload
#define DAC_LOOPDIS     (1<<2)          //* WAVEND interrupt at the end of PDC

/*-----------------------*/
/* DAC_MR: Mode Register */
/*-----------------------*/

#define DAC_TTRGEN_DIS      0x0         /* Trigger Disable */
#define DAC_TTRGEN_EN       0x1         /* Trigger Enable */
/* Trigger Selection */
#define DAC_B_TTRGSEL       1
#define DAC_TTRGSEL         (7<<DAC_B_TTRGSEL)  /* TIOA0 Trigger Selection */
#define DAC_TRG_TIOA0       (0<<DAC_B_TTRGSEL)  /* TIOA1 Trigger Selection */
#define DAC_TRG_TIOA1       (1<<DAC_B_TTRGSEL)  /* TIOA2 Trigger Selection */
#define DAC_TRG_TIOA2       (2<<DAC_B_TTRGSEL)  /* TIOA3 Trigger Selection */
#define DAC_TRG_TIOA3       (3<<DAC_B_TTRGSEL)  /* TIOA4 Trigger Selection */
#define DAC_TRG_TIOA4       (4<<DAC_B_TTRGSEL)  /* TIOA5 Trigger Selection */
#define DAC_TRG_TIOA5       (5<<DAC_B_TTRGSEL)  /* External Trigger Selection */

#define DAC_10_BIT_RES      (0<<4)      /* 10 bits DAC Resolution */
#define DAC_8_BIT_RES       (1<<4)      /*  8 bits DAC Resolution */

/*----------------------------------------------------------*/
/* DAC_DHR, DAC_DOR: Data Holding and Data Output Registers */
/*----------------------------------------------------------*/

#define DAC_DATA_10BITS    0x3FF
#define DAC_DATA_8BITS     0x0FF

/*---------------------------------------------------------------*/
/* DAC_SR,DAC_IER,DAC_IDR,DAC_IMR: Status and Interrupt Register */
/*---------------------------------------------------------------*/

#define DAC_DATRDY          (1<<0)          //* End transfert
#define DAC_WAVEND          (1<<1)          //* End wave generation
#define DAC_LOOP            (1<<16)         //* Loop mode Status register only













/*--------------------------*/
/* SPI Structure Definition */
/*--------------------------*/

typedef struct
{
    REG        SP_CR ;     /* Control Register */
    REG        SP_MR ;     /* Mode Register */
    REG        SP_RDR ;    /* Receive Data Register */
    REG        SP_TDR ;    /* Transmit Data Register */
    REG        SP_SR ;     /* Status Register */
    REG        SP_IER ;    /* Interrupt Enable Register */
    REG        SP_IDR ;    /* Interrupt Disable Register */
    REG        SP_IMR ;    /* Interrupt Mask Register */
    REG        SP_RPR ;    /* Receive Pointer_Register */
    REG        SP_RCR ;    /* Receive Counter Register */
    REG        SP_TPR ;    /* Transmit Pointer_Register */
    REG        SP_TCR ;    /* Transmit Counter Register */
    REG        SP_CSR[4] ; /* Chip Select Register 0 to 3 */
} SPI_REG_ST ;


#define SPI_BASE        ((SPI_REG_ST *)0xFFFBC000)       /* SPI */

/*---------------------------------------*/
/* Serial Peripheral Interface Registers */
/*---------------------------------------*/

#define SPI_CR      (SPI_BASE->SP_CR)
#define SPI_MR      (SPI_BASE->SP_MR)
#define SPI_RDR     (SPI_BASE->SP_RDR)
#define SPI_TDR     (SPI_BASE->SP_TDR)
#define SPI_SR      (SPI_BASE->SP_SR)

#define SPI_IER     (SPI_BASE->SP_IER)
#define SPI_IDR     (SPI_BASE->SP_IDR)
#define SPI_IMR     (SPI_BASE->SP_IMR)

#define SPI_RPR     (SPI_BASE->SP_RPR)
#define SPI_RCR     (SPI_BASE->SP_RCR)
#define SPI_TPR     (SPI_BASE->SP_TPR)
#define SPI_TCR     (SPI_BASE->SP_TCR)

#define SPI_CSR0    (SPI_BASE->SP_CSR[0])
#define SPI_CSR1    (SPI_BASE->SP_CSR[1])
#define SPI_CSR2    (SPI_BASE->SP_CSR[2])
#define SPI_CSR3    (SPI_BASE->SP_CSR[3])

/*------------------*/
/* Control Register */
/*------------------*/

#define SP_SPIEN                0x1         /* SPI Enable */
#define SP_SPIDIS               0x2         /* SPI Disable */
#define SP_SWRST                0x80        /* SPI Software Reset */

/*---------------*/
/* Mode Register */
/*---------------*/

#define SP_MSTR                 0x1         /* Master Mode Select */

#define SP_PS                   0x2         /* Peripheral Select */
#define SP_PS_FIXED             0x0         /* Fixed Peripheral Select */
#define SP_PS_VARIABLE          0x2         /* Variable Peripheral Select */

#define SP_PCSDEC               0x4         /* Chip Select Decode */
#define SP_DIV32                0x8         /* Clock Selection */
#define SP_LLB                  0x80        /* Local Loopback */

#define SP_PCS                  0xF0000     /* Peripheral Chip Select */
#define SP_PCS0                 0xE0000     /* Chip Select 0 */
#define SP_PCS1                 0xD0000     /* Chip Select 1 */
#define SP_PCS2                 0xB0000     /* Chip Select 2 */
#define SP_PCS3                 0x70000     /* Chip Select 3 */

#define SP_DLYBCS               0xFF000000  /* Delay Before Chip Selects */

/*-----------------*/
/* Status Register */
/*-----------------*/

#define SP_RDRF                 0x1         /* Receive Data Register Full */
#define SP_TDRE                 0x2         /* Transmitte Data Register Empty */
#define SP_MODF                 0x4         /* Mode Fault */
#define SP_OVRES                0x8         /* Overrun Error Status */
#define SP_ENDRX                0x10        /* End of Receiver Transfer */
#define SP_ENDTX                0x20        /* End of Transmitter Transfer */
#define SP_SPIENS               0x10000     /* SPI Enable Status */

/*------------------------------------*/
/* Receive and Transmit Data Register */
/*------------------------------------*/

#define SP_RD                   0xFFFF      /* Receive Data */
#define SP_TD                   0xFFFF      /* Transmit Data */

/*----------------------*/
/* Chip Select Register */
/*----------------------*/

#define SP_CPOL                 0x1         /* Clock Polarity */
#define SP_NCPHA                0x2         /* Clock Phase */
#define SP_BITS                 0xF0        /* Bits Per Transfer */

#define SP_BITS                 0xF0        /* Bits Per Transfer */
#define SP_BITS_8               0x00        /* 8 Bits Per Transfer */
#define SP_BITS_9               0x10        /* 9 Bits Per Transfer */
#define SP_BITS_10              0x20        /* 10 Bits Per Transfer */
#define SP_BITS_11              0x30        /* 11 Bits Per Transfer */
#define SP_BITS_12              0x40        /* 12 Bits Per Transfer */
#define SP_BITS_13              0x50        /* 13 Bits Per Transfer */
#define SP_BITS_14              0x60        /* 14 Bits Per Transfer */
#define SP_BITS_15              0x70        /* 15 Bits Per Transfer */
#define SP_BITS_16              0x80        /* 16 Bits Per Transfer */

#define SP_SCBR                 0xFF00      /* Serial Clock Baud Rate */
#define SP_DLYBS                0xFF0000    /* Delay Before SPCK */
#define SP_DLYBCT               0xFF000000  /* Delay Between Consecutive Transfer */


















/*------------------------------------------------*/
/*  Watch Dog User Interface Structure Definition */
/*------------------------------------------------*/
typedef struct
{
    REG        WD_OMR ;        /* Overflow Mode Register */
    REG        WD_CMR ;        /* Clock Mode Register */
    REG        WD_CR ;         /* Control Register */
    REG        WD_SR ;         /* Status Register */
    REG        Reserved ;
    REG        WD_TLR ;        /* Test Load Register : test purpose only */
} WD_REG_ST ;


#define WD_BASE         ((WD_REG_ST *)0xFFFF8000)       /* WatchDog */

/*-----------*/
/* Watchdog  Registers*/
/*-----------*/
#define WD_OMR      (WD_BASE->WD_OMR)
#define WD_CMR      (WD_BASE->WD_CMR)
#define WD_CR       (WD_BASE->WD_CR)

/*-----------------------------------------------------------*/
/*  WD_OMR: Watch Dog Overflow Mode Register Bits Definition */
/*-----------------------------------------------------------*/

#define WD_WDEN             0x1         /* Watch Dog Enable */
#define WD_RSTEN            0x2         /* Internal Reset Enable */
#define WD_IRQEN            0x4         /* Interrupt Enable */
#define WD_EXTEN            0x8         /* External Signal Enable */
#define WD_OKEY             0x2340      /* Overflow Mode Register Access Key */

/*--------------------------------------------------*/
/* WD_CMR: Watch Dog Clock Register Bits Definition */
/*--------------------------------------------------*/

#define WD_WDCLKS           0x3         /* Clock Selection */
#define WD_WDCLKS_MCK8      0x0
#define WD_WDCLKS_MCK32     0x1
#define WD_WDCLKS_MCK128    0x2
#define WD_WDCLKS_MCK1024   0x3

#define WD_HPCV             0x3C        /* High Preload Counter Value */

#define WD_CKEY             (0x06E<<7)  /* Clock Register Access Key */

/*---------------------------------------------------*/
/* WD_CR: Watch Dog Control Register Bits Definition */
/*---------------------------------------------------*/

#define WD_RSTKEY           0xC071      /* Watch Dog Restart Key */

/*--------------------------------------------------*/
/* WD_SR: Watch Dog Status Register Bits Definition */
/*--------------------------------------------------*/

#define WD_WDOVF            0x1         /* WatchDog Overflow Status */

/*--------------------------------------------------*/
/* WD_TLR: Test Load Register for test purpose only */
/*--------------------------------------------------*/

#define WD_TMRKEY           0xD64A0000  /* Access Key */
#define WD_TESTEN           0x2         /* Test Mode Enable */


/*------------------------------------------------*/
/*  SF User Interface Structure Definition */
/*------------------------------------------------*/
typedef struct
{
    REG        SF_CIDR ;        /* Chip ID Register */
    REG        SF_EXID ;        /* Chip ID Extension Register */
    REG        SF_RSR ;         /* Reset Status Register */
    REG        Reserved0 ;
    REG        Reserved1 ;
    REG        Reserved2 ;      
    REG        SF_PMR ;         /* SF Protect Mode Register */
} SF_REG_ST ;


#define SF_BASE         ((SF_REG_ST *)0xFFF00000)       /* SF */

/*-----------*/
/* Watchdog  Registers*/
/*-----------*/
#define SF_CIDR      (SF_BASE->SF_CIDR)
#define SF_EXID      (SF_BASE->SF_EXID)
#define SF_RSR       (SF_BASE->SF_RSR)
#define SF_PMR       (SF_BASE->SF_PMR)

/*--------------------------------------------------*/
/* SF_RSR: Reset Status Register */
/*--------------------------------------------------*/

#define SF_EXT_RESET          0x6C  /* Cause of Reset:External Pin */
#define SF_WD_RESET           0x53  /* Cause of Reset:Internal Watchdog */

#endif
